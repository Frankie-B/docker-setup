#!/bin/bash
    
command_exists () {
    type "$1" &> /dev/null ;
}

usage () {

cat <<EOF
Usage: $0 [options]
All commands are executed in context of installdirectory/docker
Options:
                        | Show this help
up [containers]         | Create and daemonize containers in docker-compose file
restart [containers]    | Restart all built containers
stop [containers]       | Stop all built containers.
start [containers]      | Start all built containers
status|ps               | Shows running status of all containers managed by this docker-compose file (ps -a)
build [containers]      | Build all containers in docker-compose file
hostversions [projects] | Shows which installed projects run on which PHP version
installdir              | Shows current install directory
dockerdir               | Shows current docker directory
sonarqube [options]     | Manage sonarqube and postgres instances
mongo [options]         | Manage mongo instances, executes options for docker compose
flushredis [db]         | Flush redis completely, or a single db
flushvarnish [url]      | Flush varnish url
tail [container]        | Tail container logs
updatehosts             | Update hostfile
reload                  | Updates hostfile and restarts nginx
EOF
}

get_installdir() {
    echo "installdirectory"
}
get_dockerdir() {
    echo "installdirectory/docker"
}

get_versions() {
    INSTALLPATH=installdirectory/data/shared/sites
    if ! command_exists jq ; then
        echo "Need jq to run this, please use sudo apt install jq"
        exit 1
    fi
    if [ $# -eq 0 ]; then
        for path in $INSTALLPATH/* ; do
            if [ -d $path/.siteconfig ]; then
                VHOST=$(basename $path)
                if [ -f $path/.siteconfig/config.json ] ; then
                    PHPVERSION=$(jq -r .php_version "$path/.siteconfig/config.json")
                elif [ -f $path/.siteconfig/config.json.example ]; then
                    PHPVERSION=$(jq -r .php_version "$path/.siteconfig/config.json.example")
                fi
                echo "$VHOST -> PHP $PHPVERSION"
            fi
        done
        # no need to do anything else for now
        return
    fi
    for project in $@ ; do
        path=$INSTALLPATH/$project
        if [ -d $path/.siteconfig ]; then
            VHOST=$(basename $path)
            if [ -f $path/.siteconfig/config.json ] ; then
                PHPVERSION=$(jq -r .php_version "$path/.siteconfig/config.json")
            elif [ -f $path/.siteconfig/config.json.example ]; then
                PHPVERSION=$(jq -r .php_version "$path/.siteconfig/config.json.example")
            fi
            echo "$VHOST -> PHP $PHPVERSION"
        fi
    done
}

flush_redis () {
    cd $(get_dockerdir)
    if [ $# -eq 0 ]; then
        docker compose exec redis redis-cli flushall
        return
    fi
    docker compose exec redis redis-cli -n $1 flushdb
}

flush_varnish () {
    curl -X PURGE -H "X-Magento-Tags-Pattern: .*" $1
}

reload () {
    update_hosts
    cd $(get_dockerdir)
    docker-compose restart nginx
}

update_hosts () {
    INSTALLDIR=$(get_installdir)
    HOSTS="/etc/hosts"
    IPADDR=127.0.0.1
    # check if wsl
    if [ -d '/mnt/c' ]; then
        HOSTS="/mnt/c/Windows/System32/drivers/etc/hosts"
        IPADDR=$(ip -4 addr show eth0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
    fi
    XCOMUSER=$(cat /etc/xcomuser)
    TMPHOSTS="/tmp/hosts"
    sudo chmod 755 $TMPHOSTS
    cp $HOSTS $TMPHOSTS
    sed -i '/#START XCOM HOSTS/,/#END XCOM HOSTS/d' $TMPHOSTS
    echo "#START XCOM HOSTS" >> $TMPHOSTS
    for d in `find -L $INSTALLDIR/data/shared/sites -mindepth 1 -maxdepth 1 -type d`; do
        SITEBASENAME=`basename $d`
        echo $IPADDR $SITEBASENAME.$XCOMUSER.o.xotap.nl>> $TMPHOSTS
    done
    echo $IPADDR "devserver" >> $TMPHOSTS
    echo "#END XCOM HOSTS" >> $TMPHOSTS
    sudo cp $TMPHOSTS $HOSTS
    rm $TMPHOSTS
}

cd installdirectory/docker
case "$1" in
    up)
        docker compose up -d ${@:2}
        ;;
    restart)
        docker compose restart ${@:2}
        ;;
    stop)
        docker compose stop ${@:2}
        ;;
    start)
        docker compose start ${@:2}
        ;;
    status|ps)
        docker compose ps -a
        ;;
    build)
        docker compose pull ${@:2}
        docker compose build ${@:2}
        ;;
    hostversions)
        get_versions ${@:2}
        ;;
    installdir)
        get_installdir
        ;;
    dockerdir)
        get_dockerdir
        ;;
    sonarqube)
        docker compose -f sonarqube.yml ${@:2}
	    ;;
    mongo)
        docker compose -f mongo.yml ${@:2}
	    ;;
    flushredis)
        flush_redis $2
        ;;
    flushvarnish)
        flush_varnish $2
        ;;
    tail)
        docker compose logs -f $2
        ;;
    updatehosts)
        update_hosts
        ;;
    reload)
        update_hosts
        cd $(get_dockerdir)
        docker compose restart nginx
    *)
        usage
        exit 1
esac

exit 0
